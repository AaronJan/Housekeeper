{"name":"Housekeeper","tagline":"Powerful, simple Repository-Pattern implementation for Laravel (>=5.1), and it come with tests.","body":"# Housekeeper - Laravel\r\n\r\n\r\n**More documents and tests are still writing**\r\n\r\n\r\n## Introduction\r\n\r\n\r\nPowerful, simple `Repository-Pattern` implementation for Laravel `(>= 5.0)` and PHP `(>= 5.5)`, and it come with tests.\r\n\r\n\r\n## Sections\r\n\r\n\r\n- [About Repository-Pattern](#repository-pattern)\r\n- [About Housekeeper](#about-housekeeper)\r\n\t- [Housekeeper Features](#housekeeper-features)\r\n\t- [What's the Differents And How Housekeeper Works](#whats-the-differents-and-how-housekeeper-works)\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n    - [Create a repository](#create-a-repository)\r\n\t- [Write your repository method](#write-your-repository-method)\r\n\t- [Action](#action)\r\n\t- [Traits](#traits)\r\n\t\t- [Cacheable](#cacheable)\r\n\t\t- [Adjustable](#adjustable)\r\n\t\t- [Metadata](#metadata)\r\n- [Development Logs](#development-logs)\r\n- [Issue](#issue)\r\n- [Lisence](#lisence)\r\n- [Credits](#credits)\r\n\r\n\r\n## Repository-Pattern\r\n\r\n\r\nThere are many articles about **How to implement `Repository-Pattern` in `Laravel`**, and they're a little different from one another. but in general, the idea is you only ask data from your `repository`. \r\n\r\nIf you want to caching result, you can `extend` your `basic repository`, override methods, add some caching logic to them, or using `Decorator-Pattern` to do the same, by utilizing `IOC` in `Laravel`, you can switch them easily, usage still be the same.\r\n\r\n\r\n## About Housekeeper\r\n\r\n\r\nI searched `GitHub` for `Repository-Pattern` `PHP` packages, there are some, but most seems incomplete or not catching up with `Laravel 5`, but there is one stood up, it's [prettus/l5-repository](https://github.com/prettus/l5-repository).\r\n\r\nAfter reading the documents and codes, I'm start to wondering: *maybe `Repository-Pattern` could be simpler*? And `prettus/l5-repository` is too much for me, `RequestCriteria`, `Validation`... They are great features, but what if I don't want them in my repository? Can I just import them in on my demond? So I wrote `Housekeeper`. \r\n\r\nI started from the code of `prettus/l5-repository` in `2015/06/25`, but they're completely different now.\r\n\r\n\r\n### Housekeeper Features\r\n\r\n\r\n* Laravel console generators\r\n* **Provides basic repository method**\r\n\t* `create`, `find`, `update`, `delete`, `paginate`, `all`, `findByField`, `findWhere`, `with`, only the basics\r\n* **`Cache`, `Criteria` features are traits**\r\n\t* Say bye-bye to boring duplicated code\r\n* **Easy to extend**\r\n\t* See [here](https://github.com/AaronJan/Housekeeper/tree/master/src/Housekeeper/Traits/Repository), really easy\r\n* **Clean code**\r\n\t* If you like the old-fashioned layer technic, `Housekeeper` will not get in your way\r\n* **Comes with tests**\r\n\t* Aim to `85%` (or even more), still adding\r\n\r\n\r\n### What's the Differents And How Housekeeper Works\r\n\r\n\r\nTraditional `Repository-Pattern` is all about `layer`, want to caching data, you add a layer. That's great concept, and you can still do that in `Housekeeper`. But features like `cache`, `criteria` I used something like `middleware`.\r\n\r\nEach repository method calling in `Housekeeper` is called `Action`, it go through four `Flows`: *Before*, *Your method logic*, *Reset* and *After*, result could be returned in *Before* or *After* `Flows`. You can write `Injections` to extending any `Flow`'s logic.\r\n\r\n#### Example\r\n\r\nTalk is cheap, I'll show you some code. Let's talk about an example, like the logic of `Caching`:\r\n\r\n\tWhen a request coming in, Check if cache exists\r\n\tIf it's, then return the cached result\r\n\tIf it's not, do the logic then caching result\r\n\tWhen creating, updating or deleting happens, clear the cache\r\n\t\r\nThat's `Cache` right? if you do the traditional way, you will end up with a lot of duplicated code.\r\n\r\nBut with `Injection`, you just put the `cache-checking` in a *Before* injection, and put `cache-setting` in an *After* injection. You can identify `read`/`create`/`update`/`delete` `Actions` in the `Flow` (even get the name of method), so you write `cache-cleanning` logic in an *After* injection specify for `create`/`update`/`delete` `Action`. In the end, write a `Trait` with just one method `setupCache` like this:\r\n\r\n```php\r\ntrait Cache\r\n{\r\n\tprotected function setupCache()\r\n\t{\r\n\t\t// Your before injection\r\n\t\t$this->inject(new GetCacheIfExistsBefore($this->app));\r\n\t\t\r\n\t\t// Your after injection\r\n\t\t$this->inject(new CacheResultAfter($this->app));\r\n\t}\r\n}\r\n```\r\n\r\nThat's all. And that's how `Housekeeper` did, you can check it at [here](https://github.com/AaronJan/Housekeeper/blob/master/src/Housekeeper/Traits/Repository/Cacheable.php).\r\n\r\nEach `Injection` has a `priority` method, so if you want to add some logic before `Cache`, just return a integer that lower then `Cache`'s `priority`.\r\n\r\n\r\n#### What's this Setup\r\n\r\n\r\nIn repository's constructor, it will calling every method that name started with *setup* and followed with an `upper-case` letter. you can inject your `Injections` in such method.\r\n\r\n\r\n## Installation\r\n\r\n\r\n`Housekeeper` comes with a `Composer` package, you can install `Housekeeper` very easily.\r\n\r\nRequire this package with `Composer`:\r\n\r\n```shell\r\ncomposer require aaronjan/housekeeper\r\n```\r\n\r\nAfter `Composer` command completed, then add the service provider to the to `config/app.php`:\r\n\r\n```php\r\n\r\n/*\r\n * Housekeeper\r\n */\r\n\\Housekeeper\\Providers\\HousekeeperServiceProvider::class,\r\n\r\n```\r\n\r\nThat's all. If you run `php artisan`, you should see something in the command list like this:\r\n\r\n\t housekeeper\r\n       housekeeper:make:repository  Make a repository file.\r\n\r\n\r\n## Usage\r\n\r\n\r\n### Create a repository\r\n\r\n\r\n#### Prepare your model\r\n\r\n\r\nFirst create your model anyway you like, since `create` and other some methods in `Housekeeper` used the [`Mass Assignment`](http://laravel.com/docs/5.1/eloquent#mass-assignment) feature of `Laravel`, you need to specify `fillable` variables in your model like this:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Article extends Model\r\n{\r\n    /**\r\n     * The attributes that are mass assignable.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $fillable = ['title', 'content'];\r\n}\r\n\r\n```\r\n\r\n\r\n#### Using Repository Generator\r\n\r\n\r\nThen you can create a repository using `generator`:\r\n\r\n```shell\r\nphp artisan housekeeper:make:repository ArticleRepository --cacheable --adjustable\r\n```\r\n\r\nYou may not need `--cacheable` or `--adjustable`, but you should keep that in mind, they're easy to use.\r\n\r\nAfter this command, a repository file named `ArticleRepository.php` should in your `app/Repositories/` folder, and looks like this:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Repositories;\r\n\r\nuse Housekeeper\\Eloquent\\BaseRepository;\r\nuse Housekeeper\\Traits\\Repository\\Adjustable;\r\nuse Housekeeper\\Traits\\Repository\\Cacheable;\r\n\r\nclass ArticleRepository extends BaseRepository {\r\n\r\n    use Adjustable, Cacheable;\r\n\r\n    /**\r\n     * Return the name of model that this repository used.\r\n     *\r\n     * @return string\r\n     */\r\n    protected function model()\r\n    {\r\n        //\r\n    }\r\n\r\n}\r\n```\r\n\r\nAdd a line of code in the `model` method, return the model name of this repository (I put models in `app/Models/`):\r\n\r\n```php\r\nprotected function model()\r\n{\r\n    return \\App\\Models\\Article::class;\r\n}\r\n```\r\n\r\nThen you just created your first `Housekeeper` repository.\r\n\r\n\r\n### Write your repository method\r\n\r\n\r\nAll methods of repository should be wrapped like this:\r\n\r\n```php\r\npublic function yourMethod($argument)\r\n{\r\n    return $this->wrap(function ($argument) {\r\n\r\n\t\t//Method logic\r\n\r\n        return $result;\r\n\r\n    }, new Action(__METHOD__, func_get_args(), Action::READ));\r\n}\r\n```\r\n\r\nLooks complicated, but just two parts: first is your actual method that returns result, second is an `Action` object that represents this method, so all `Flows` could identity this method.\r\n\r\nFirst argument of `wrap` just need to be a `Callable`, means you can use things other than `Closure`.\r\n\r\n\r\n### Action\r\n\r\n\r\n`Action` represents a method call, whole class is `Housekeeper\\Action`, it's constructor needs **three** parameters: `Method Name`, `Method Arguments` and `Method Type`.\r\n\r\n`Method Type` could be any one in `UNKNOW`, `CREATE`, `UPDATE`, `READ` and `DELETE`, it's a convention for `Injection` to work with.\r\n\r\n\r\n### Traits\r\n\r\n\r\n`Housekeeper` comes with **Three** traits that you can use, like `Cacheable`, simple add `use \\Housekeeper\\Traits\\Repository\\Cacheable;` to your repository is all.\r\n\r\n\r\n#### Cacheable\r\n\r\n\r\nPriority **50**.\r\n\r\n`Cacheable` works with `Redis`.\r\n\r\n`Cacheable` trait will caching all result returned by a `Read Action`, and clear all cache of this repository when `Create Action`, `Update Action` or `Delete Action` be called.\r\n\r\nNotice this, every method has it's own cache key, arguments that pass to the method will change the cache key too.\r\n\r\n\r\n#### Adjustable\r\n\r\nPriority **10**.\r\n\r\n`Adjustable` allow you to pack some search conditions into a `Criteria` object, so you can reuse them, `Criteria` object should implements `Housekeeper\\Contracts\\CriteriaInterface`, has only one `apply` method.\r\n\r\n`Adjustable` add **Three** methods to your repository.\r\n\r\n\r\n##### rememberCriteria(CriteriaInterface $criteria)\r\n\r\n\r\nRemember this `Criteria`, so it would be applied before all methods, this will change the cache key too.\r\n\r\n\r\n##### forgetCriterias()\r\n\r\n\r\nRemove all `Criteria` that repository remembered.\r\n\r\n\r\n##### getCriterias()\r\n\r\n\r\nReturns all `Criteria` that repository remembered.\r\n\r\n\r\n#### Metadata\r\n\r\nPriority **30**.\r\n\r\n`Housekeeper` returns `Eloquent` object or `Collection` object by default, if you like `Array` a lot, use `Metadata` trait, it will converting all result to `Array` (If the result can't be converted, nothing will happen).\r\n\r\n\r\n## Development Logs\r\n\r\n\r\n### v0.9.1 - 2015/07/07\r\n\r\nDocuments are mostly completed, package is usable, still needs more tests.\r\n\r\n\r\n## Issue\r\n\r\n\r\nIf you have any question for `Housekeeper`, feel free to create an issue, I'll reply you ASAP.\r\n\r\nAny useful pull request are welcomed too.\r\n\r\n\r\n## Lisence\r\n\r\n\r\nLicensed under the [APACHE LISENCE V2](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\n\r\n## Credits\r\n\r\n\r\nThinks to [prettus/l5-repository](https://github.com/prettus/l5-repository) for inspiring.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}