{"name":"Housekeeper","tagline":"Powerful, simple Repository-Pattern implementation for Laravel (>=5.1), and it come with tests.","body":"# Housekeeper - Laravel\r\n\r\n\r\n**More documents and tests are still writing**\r\n\r\n\r\n## Introduction\r\n\r\n\r\nPowerful, simple `Repository-Pattern` implementation for Laravel `(>= 5.0)`, and it come with tests.\r\n\r\n\r\n## Sections\r\n\r\n- [About Repository-Pattern](#repository-pattern)\r\n- [About Housekeeper](#about-housekeeper)\r\n\t- [Housekeeper Features](#housekeeper-features)\r\n\t- [What's the Differents And How Housekeeper Works](#whats-the-differents-and-how-housekeeper-works)\r\n- [Installation(TODO)](#installation)\r\n- [Usage(TODO)](#usage)\r\n- [Credits](#credits)\r\n\r\n\r\n## Repository-Pattern\r\n\r\nThere are many articles about **How to implement `Repository-Pattern` in `Laravel`**, and they're a little different from one another. but in general, the idea is you only ask data from your `repository`. \r\n\r\nIf you want to caching result, you can `extend` your `basic repository`, override methods, add some caching logic to them, or using `Decorator-Pattern` to do the same, by utilizing `IOC` in `Laravel`, you can switch them easily, usage still be the same.\r\n\r\n\r\n## About Housekeeper\r\n\r\n\r\nI searched `GitHub` for `Repository-Pattern` `PHP` packages, there are some, but most seems incomplete or not catching up with `Laravel 5`, but there is one stood up, it's [prettus/l5-repository](https://github.com/prettus/l5-repository).\r\n\r\nAfter reading the documents and codes, I'm start to wondering: *maybe `Repository-Pattern` could be simpler*? And `prettus/l5-repository` is too much for me, `RequestCriteria`, `Validation`... They are great features, but what if I don't want them in my repository? Can I just import them in on my demond? So I wrote `Housekeeper`. \r\n\r\nI started from the code of `prettus/l5-repository` in `2015/06/25`, but they're completely different now.\r\n\r\n\r\n### Housekeeper Features\r\n\r\n\r\n* Repository console generators\r\n* Provides basic repository method: `create`, `find`, `update`, `delete`, `paginate`, `all`, `findByField`, `findWhere`, `with`, only the basics\r\n* `Cache`, `Criteria` as class traits\r\n* Easy to extending\r\n* With tests\r\n\r\n\r\n### What's the Differents And How Housekeeper Works\r\n\r\n\r\nTraditional `Repository-Pattern` is all about `layer`, want to caching data, you add a layer! That's great concept, you can still do that in `Housekeeper`. But features like `cache`, `criteria` I used something like `middleware`.\r\n\r\nEach repository method calling in `Housekeeper` is called `Action`, it go through four `Flows`: *Before*, *Your method logic*, *Reset* and *After*, result could be returned in *Before* or *After* `Flows`. You can write `Injections` to extending any `Flow`.\r\n\r\n#### Example\r\n\r\nLet's talk about an example, like `Cache`.\r\n\r\n\tCheck if cache exists, if it's, then return the cached result, if it's not, do the logic then caching result.\r\n\r\nThat's `Cache` right? if you do the traditional way, you will end up with a lot of duplicated code.\r\n\r\nBut with `Injection`, you just put the `cache-checking` in a *Before* injection, and put `cache-setting` in an *After* injection. You can identify `read`/`create`/`update`/`delete` `Actions` in the `Flow` (even get the name of method), so you write `cache-cleanning` logic in an *After* injection specify for `create`/`update`/`delete` `Action`. In the end, write a `Trait` with just one method `setupCache` like this:\r\n\r\n```php\r\ntrait Cache\r\n{\r\n\tprotected function setupCache()\r\n\t{\r\n\t\t$this->inject(new GetCacheIfExistsBefore($this->app)); // Your before injection\r\n\t\t$this->inject(new CacheResultAfter($this->app)); // Your after injection\r\n\t}\r\n}\r\n```\r\n\r\nThat's all done.\r\n\r\nEach `Injection` has a `priority` method, so if you want to add some logic before `Cache`, just return a integer that lower then `Cache`'s `priority`.\r\n\r\n\r\n#### Setup\r\n\r\n\r\nIn repository's constructor, it will calling every method that name started with *setup*, you can inject your `Injections` in there.\r\n\r\n\r\n## Installation\r\n\r\n\r\nTODO\r\n\r\n\r\n## Usage\r\n\r\n\r\nTODO\r\n\r\n\r\n## Lisence\r\n\r\n\r\nTODO\r\n\r\n\r\n## Credits\r\n\r\n\r\nThinks to [prettus/l5-repository](https://github.com/prettus/l5-repository) for inspired me.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}